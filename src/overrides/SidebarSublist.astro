---
import type { StarlightRouteData } from '@astrojs/starlight/route-data'

interface Props {
  sublist: StarlightRouteData['sidebar']
  nested?: boolean
}

const { sublist, nested } = Astro.props
---

{
  sublist.map((entry) =>
    entry.type === 'link' ? (
      <a
        href={entry.href}
        aria-current={entry.isCurrent && 'page'}
        class:list={['entry-link', entry.attrs.class]}
        {...entry.attrs}
      >
        {entry.label}
        {entry.badge && <span class="entry-badge">{entry.badge.text}</span>}
      </a>
    ) : (
      <div class="container-sidebar-entry">
        <button class="entry-title-button" data-group-toggle>
          <h4 class="entry-title">{entry.label}</h4>
          <svg
            class="collapse-icon"
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="m6 9 6 6 6-6" />
          </svg>
        </button>
        <div class="container-group-link" data-group-content>
          <Astro.self sublist={entry.entries} nested />
        </div>
      </div>
    ),
  )
}

<style>
  .container-sidebar-entry {
    flex-direction: column;
    display: flex;
  }

  .container-sidebar-entry.is-expanded {
    margin-bottom: 1rem;
  }

  .entry-title-button {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    background: none;
    border: none;
    padding: 0.5rem 0;
    cursor: pointer;
    color: inherit;
    font: inherit;
    text-align: left;
  }

  .entry-title-button:hover {
    color: var(--accent-foreground);
  }

  .entry-title {
    margin: 0;
    font-size: 0.875rem;
    font-weight: 600;
  }

  .collapse-icon {
    width: 1rem;
    height: 1rem;
    transition: transform 0.2s ease-in-out;
    flex-shrink: 0;
  }

  .container-sidebar-entry.collapsed .collapse-icon {
    transform: rotate(-90deg);
  }

  .container-group-link {
    overflow: hidden;
    max-height: 1000px;
    opacity: 1;
  }

  .container-sidebar-entry.collapsed .container-group-link {
    max-height: 0;
    opacity: 0;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButtons = document.querySelectorAll('[data-group-toggle]')

    toggleButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const entry = button.closest('.container-sidebar-entry')
        if (entry) {
          entry.classList.toggle('collapsed')
          entry.classList.toggle('is-expanded')

          // Store collapse state in localStorage
          const titleText = button.querySelector('.entry-title')?.textContent?.trim()
          if (titleText) {
            const isCollapsed = entry.classList.contains('collapsed')
            localStorage.setItem(`sidebar-${titleText}`, isCollapsed.toString())
          }
        }
      })
    })

    // Restore collapse state from localStorage and set initial expanded state
    toggleButtons.forEach((button) => {
      const titleText = button.querySelector('.entry-title')?.textContent?.trim()
      const entry = button.closest('.container-sidebar-entry')

      if (titleText && entry) {
        const isCollapsed = localStorage.getItem(`sidebar-${titleText}`) === 'true'
        if (isCollapsed) {
          entry.classList.add('collapsed')
          entry.classList.remove('is-expanded')
        } else {
          entry.classList.remove('collapsed')
          entry.classList.add('is-expanded')
        }
      }
    })
  })
</script>
